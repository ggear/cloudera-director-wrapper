name: graham-demo

provider {
  type: aws
  accessKeyId: ${?CLOUD_PROVIDER_ID}
  secretAccessKey: ${?CLOUD_PROVIDER_KEY}
  publishAccessKeys: true
  region: eu-west-1
  keyName: graham-launchpad
  subnetId: subnet-8239ece7
  securityGroupsIds: sg-4b71a02e
  instanceNamePrefix: graham-demo
  rootVolumeSizeGB: 50
  associatePublicIpAddresses: true
}

ssh {
  username: root
  privateKey: /root/.ssh/launchpad
}

instances {
  master {
    type: m2.xlarge
    image: ami-77137c00
    #image: ami-42718735
    tags {
      owner: graham
    }
    bootstrapScript: """#!/bin/sh
      echo "Nothing to see here!"
      exit 0
    """
  }
  slave {
    type: m1.large
    image: ami-77137c00
    #image: ami-42718735
    tags {
      owner: graham
    }
    bootstrapScript: """#!/bin/sh
      echo "Nothing to see here!"
      exit 0
    """
  }
  gateway {
    type: m1.small
    image: ami-77137c00
    #image: ami-42718735
    tags {
      owner: graham
    }
    bootstrapScript: """#!/bin/sh
      echo "Nothing to see here!"
      exit 0
    """
  }
}

cloudera-manager {
  instance: ${instances.master} {
    tags {
      group: manager
    }
  }
  enableEnterpriseTrial: true
  repository: "http://ec2-54-77-57-3.eu-west-1.compute.amazonaws.com/tmph3l7m2vv103/cloudera-repos/cm5/redhat/6/x86_64/cm/5/"
  repositoryKeyUrl: "http://ec2-54-77-57-3.eu-west-1.compute.amazonaws.com/tmph3l7m2vv103/cloudera-repos/cm5/redhat/6/x86_64/cm/RPM-GPG-KEY-cloudera"
  configs {
    CLOUDERA_MANAGER {
      enable_api_debug: true
    }
  }
}

cluster {
  products {
    CDH: 5
  }
  parcelRepositories: ["http://ec2-54-77-57-3.eu-west-1.compute.amazonaws.com/tmph3l7m2vv103/cloudera-repos/cdh5/parcels/latest/",
    "http://ec2-54-77-57-3.eu-west-1.compute.amazonaws.com/tmph3l7m2vv103/cloudera-repos/cdh5/parcels/5.4.0/", 
    "http://ec2-54-77-57-3.eu-west-1.compute.amazonaws.com/tmph3l7m2vv103/cloudera-repos/cdh5/parcels/5.3.3/", 
    "http://ec2-54-77-57-3.eu-west-1.compute.amazonaws.com/tmph3l7m2vv103/cloudera-repos/cdh5/parcels/5.3.2/"]
  services: [HDFS, YARN, ZOOKEEPER, SENTRY, HBASE, KS_INDEXER, SPARK, SOLR, HIVE, IMPALA, OOZIE, SQOOP, FLUME, KAFKA, HUE]
  #hostname: "10.0.0.114"
  #username: "admin"
  #password: "admin"
  configs {
    SENTRY {
      sentry_server_config_safety_valve: "<property><name>sentry.hive.testing.mode</name><value>true</value></property>"
    }
    HIVE {
      hive_server2_sentry_safety_valve: "<property><name>sentry.hive.testing.mode</name><value>true</value></property>"
    }
    IMPALA {
      impalad_sentry_safety_valve: "<property><name>sentry.hive.testing.mode</name><value>true</value></property>"
    }
    HUE {
      hue_sentry_safety_valve: "<property><name>sentry.hive.testing.mode</name><value>true</value></property>"
    }
  }
  master-1 {
    count: 1
    minCount: 1
    #placementGroup: graham-demo    
    instance: ${instances.master} {
      tags {
        group: master
      }
    }
    roles {
      HDFS: [NAMENODE]
      ZOOKEEPER: [SERVER]
    }
  }
  master-2 {
    count: 1
    minCount: 1
    #placementGroup: graham-demo    
    instance: ${instances.master} {
      tags {
        group: master
      }
    }
    roles {
      HDFS: [SECONDARYNAMENODE]
      YARN: [RESOURCEMANAGER, JOBHISTORY]
      ZOOKEEPER: [SERVER]
      HBASE: [MASTER, HBASETHRIFTSERVER, HBASERESTSERVER]
      SPARK: [SPARK_MASTER]
    }
  }
  master-3 {
    count: 1
    minCount: 1
    #placementGroup: graham-demo    
    instance: ${instances.master} {
      tags {
        group: master
      }
    }
    roles {
      SENTRY: [SENTRY_SERVER]
      ZOOKEEPER: [SERVER]
      OOZIE: [OOZIE_SERVER]
      SQOOP: [SQOOP_SERVER]
      HIVE: [HIVESERVER2, HIVEMETASTORE, WEBHCAT]
      IMPALA: [CATALOGSERVER, STATESTORE]
      KAFKA: [KAFKA_BROKER]
      HUE: [HUE_SERVER]
    }
  }
  slaves {
    count: 3
    minCount: 3
    #placementGroup: graham-demo    
    instance: ${instances.slave} {
      tags {
        group: worker
      }
    }
    roles {
      HDFS: [DATANODE]
      YARN: [NODEMANAGER]
      HBASE: [REGIONSERVER]
      SOLR: [SOLR_SERVER]
      KS_INDEXER: [HBASE_INDEXER]
      SPARK: [SPARK_WORKER]
      IMPALA: [IMPALAD]
    }
  }
  gateways {
    count: 1
    minCount: 1
    #placementGroup: graham-demo    
    instance: ${instances.gateway} {
      tags {
        group: gateway
      }
    }
    roles {
      HDFS: [HTTPFS, NFSGATEWAY, GATEWAY]
      YARN: [GATEWAY]
      HBASE: [GATEWAY]
      SOLR: [GATEWAY]
      HIVE: [GATEWAY]
      FLUME: [AGENT]
    }
  }
}
